// pages/files.tsx
import { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import Layout from '../client/components/Layout';

interface File {
  id: string;
  name: string;
  type: string;
  size: number;
  sizeFormatted: string;
  created: string;
  summary: string;
}

export default function FilesPage() {
  const [currentEmotion, setCurrentEmotion] = useState('curious');
  const [files, setFiles] = useState<File[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [activeFile, setActiveFile] = useState<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Format bytes to human-readable size
  const formatBytes = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // In a real implementation, this would fetch files data
  useEffect(() => {
    // Simulate fetching files
    const fetchFiles = async () => {
      try {
        setIsLoading(true);
        
        // This would be an API call in a real implementation
        // const response = await fetch('/api/files');
        // const data = await response.json();
        
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // For demo purposes, use placeholder data
        const mockFiles: File[] = [
          {
            id: '1',
            name: 'project-report.pdf',
            type: 'application/pdf',
            size: 2500000,
            sizeFormatted: formatBytes(2500000),
            created: new Date().toISOString(),
            summary: 'Quarterly project status report with timelines and milestones.',
          },
          {
            id: '2',
            name: 'data-analysis.xlsx',
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            size: 1800000,
            sizeFormatted: formatBytes(1800000),
            created: new Date().toISOString(),
            summary: 'Financial data analysis with quarterly projections and charts.',
          },
          {
            id: '3',
            name: 'meeting-notes.txt',
            type: 'text/plain',
            size: 15000,
            sizeFormatted: formatBytes(15000),
            created: new Date().toISOString(),
            summary: 'Notes from the team meeting discussing project goals and action items.',
          },
          {
            id: '4',
            name: 'presentation.pptx',
            type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            size: 3500000,
            sizeFormatted: formatBytes(3500000),
            created: new Date().toISOString(),
            summary: 'Investor presentation with company overview and growth metrics.',
          },
        ];
        
        setFiles(mockFiles);
      } catch (error) {
        console.error('Error fetching files:', error);
      } finally {
        setIsLoading(false);
      }
    };

    // Simulate getting current emotion
    const fetchCurrentEmotion = async () => {
      try {
        // This would be an API call in a real implementation
        // const response = await fetch('/api/emotion/current');
        // const data = await response.json();
        
        // For demo purposes, use placeholder data
        setCurrentEmotion('curious');
      } catch (error) {
        console.error('Error fetching current emotion:', error);
      }
    };

    fetchFiles();
    fetchCurrentEmotion();
  }, []);

  // Handle file upload
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0) return;
    
    const file = e.target.files[0];
    
    try {
      setIsUploading(true);
      setUploadProgress(0);
      
      // Create FormData
      const formData = new FormData();
      formData.append('file', file);
      
      // Simulate upload progress (in a real implementation, this would use fetch with progress tracking)
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {