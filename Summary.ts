// server/services/dailySummary.ts
import { format } from 'date-fns';
import cron from 'node-cron';
import { 
  getRecentMessages, 
  getKnowledgeNodes, 
  saveDailySummary,
  logEvent 
} from '../utils/supabase';
import { getRecentEmails, getTodayEvents, sendEmail } from './google';
import { summarizeMessages } from './openai';
import { exec } from 'child_process';
import { promisify } from 'util';

// Promisify exec
const execAsync = promisify(exec);

/**
 * Generate a daily summary and send it via email
 */
export const generateDailySummary = async (
  userId: string,
  userEmail: string,
  googleTokens: any
): Promise<{
  summary: any;
  emailSent: boolean;
}> => {
  try {
    const date = format(new Date(), 'yyyy-MM-dd');
    
    // Log the start of the process
    await logEvent(
      'daily_summary',
      `Started generating daily summary for ${date}`,
      undefined,
      'summary',
      ['summary', 'start']
    );
    
    // 1. Get recent messages for chat summary
    const recentMessages = await getRecentMessages(50);
    const chatSummary = await summarizeMessages(
      recentMessages.map(msg => ({
        role: msg.role as any,
        content: msg.content,
      }))
    );
    
    // 2. Get knowledge summary - newly learned items
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const knowledgeNodes = await getKnowledgeNodes();
    const newKnowledge = knowledgeNodes.filter(node => 
      new Date(node.created_at) >= yesterday
    );
    
    const knowledgeSummary = `Learned ${newKnowledge.length} new facts/concepts in the past 24 hours:
${newKnowledge.map(node => `- ${node.name} (${node.type})`).join('\n')}`;
    
    // 3. Get emotion summary (placeholder - would be implemented in a real system)
    // This would analyze sentiment trends from the emotion_logs table
    const emotionSummary = 'Overall positive interactions, with some periods of focused problem-solving.';
    
    // 4. Get email summary
    const recentEmails = await getRecentEmails(googleTokens, 10);
    const emailSummary = `Recent emails (${recentEmails.length} total):
${recentEmails.slice(0, 5).map(email => `- ${email.subject} from ${email.from.split('<')[0].trim()}`).join('\n')}`;
    
    // 5. Get calendar summary
    const todayEvents = await getTodayEvents(googleTokens);
    const calendarSummary = `Today's schedule (${todayEvents.length} events):
${todayEvents.map(event => {
      const start = new Date(event.start);
      return `- ${format(start, 'h:mm a')}: ${event.summary}${event.location ? ` at ${event.location}` : ''}`;
    }).join('\n')}`;
    
    // 6. Get code changes summary
    let codeChanges = '';
    
    try {
      // Get git log for the past 24 hours
      const { stdout } = await execAsync(
        `git log --since="1 day ago" --pretty=format:"%h - %s (%cr)" --no-merges`
      );
      
      codeChanges = `Recent code changes:
${stdout || 'No code changes in the past 24 hours'}`;
    } catch (error) {
      console.error('Error getting git log:', error);
      codeChanges = 'Unable to retrieve code changes.';
    }
    
    // 7. Save the summary to the database
    const summary = await saveDailySummary(
      date,
      chatSummary,
      knowledgeSummary,
      emotionSummary,
      emailSummary,
      calendarSummary,
      codeChanges
    );
    
    // 8. Send the email
    const emailSubject = `Astra Daily Summary - ${format(new Date(), 'MMMM d, yyyy')}`;
    const emailBody = `
<!DOCTYPE html>
<html>
<head>
  <style>
    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; }
    h1 { color: #2c3e50; border-bottom: 1px solid #eee; padding-bottom: 10px; }
    h2 { color: #3498db; margin-top: 20px; }
    .section { margin-bottom: 30px; }
    pre { background-color: #f8f9fa; padding: 10px; border-radius: 5px; }
  </style>
</head>
<body>
  <h1>Astra Daily Summary - ${format(new Date(), 'MMMM d, yyyy')}</h1>
  
  <div class="section">
    <h2>ðŸ’¬ Conversation Highlights</h2>
    <p>${chatSummary}</p>
  </div>
  
  <div class="section">
    <h2>ðŸ§  Knowledge Gained</h2>
    <pre>${knowledgeSummary}</pre>
  </div>
  
  <div class="section">
    <h2>ðŸ˜Š Emotional Trends</h2>
    <p>${emotionSummary}</p>
  </div>
  
  <div class="section">
    <h2>ðŸ“§ Recent Emails</h2>
    <pre>${emailSummary}</pre>
  </div>
  
  <div class="section">
    <h2>ðŸ“… Today's Schedule</h2>
    <pre>${calendarSummary}</pre>
  </div>
  
  <div class="section">
    <h2>ðŸ’» Code Changes</h2>
    <pre>${codeChanges}</pre>
  </div>
  
  <p style="font-style: italic; color: #7f8c8d; margin-top: 40px;">
    This summary was generated by Astra, your AI assistant.
  </p>
</body>
</html>
`;
    
    await sendEmail(googleTokens, userEmail, emailSubject, emailBody, true);
    
    // 9. Update the summary record to mark email as sent
    await saveDailySummary(
      date,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    
    // Log the completion of the process
    await logEvent(
      'daily_summary',
      `Daily summary generated and sent for ${date}`,
      undefined,
      'summary',
      ['summary', 'complete']
    );
    
    return {
      summary,
      emailSent: true,
    };
  } catch (error) {
    console.error('Error generating daily summary:', error);
    
    // Log the error
    await logEvent(
      'daily_summary',
      `Error generating daily summary: ${error.message}`,
      undefined,
      'summary',
      ['summary', 'error']
    );
    
    throw error;
  }
};

/**
 * Schedule the daily summary job
 * Runs at 6am PST (2pm UTC)
 */
export const scheduleDailySummary = (
  userId: string,
  userEmail: string,
  googleTokens: any
): void => {
  // Schedule for 6am PST (14:00 UTC)
  // cron format: minute hour day-of-month month day-of-week
  // 0 14 * * * means 14:00 UTC every day
  cron.schedule('0 14 * * *', async () => {
    try {
      console.log('Running scheduled daily summary job');
      await generateDailySummary(userId, userEmail, googleTokens);
    } catch (error) {
      console.error('Error in scheduled daily summary job:', error);
    }
  });
  
  console.log('Daily summary job scheduled to run at 6am PST');
};

/**
 * Manually trigger the daily summary generation
 */
export const triggerDailySummary = async (
  userId: string,
  userEmail: string,
  googleTokens: any
): Promise<{
  summary: any;
  emailSent: boolean;
}> => {
  return await generateDailySummary(userId, userEmail, googleTokens);
};

export default {
  generateDailySummary,
  scheduleDailySummary,
  triggerDailySummary,
};
